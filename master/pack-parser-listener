# HG changeset patch
# Parent  ef58043a2276cdbcdc2e654b63a9d998a82ca56f

diff -r ef58043a2276 org.eclipse.jgit/src/org/eclipse/jgit/transport/ReceivePack.java
--- a/org.eclipse.jgit/src/org/eclipse/jgit/transport/ReceivePack.java	Mon Jun 17 15:14:00 2019 +0200
+++ b/org.eclipse.jgit/src/org/eclipse/jgit/transport/ReceivePack.java	Mon Jun 17 15:17:15 2019 +0200
@@ -149,6 +149,37 @@
 			return command.getCapabilities();
 		}
 	}
+  
+  /** 
+   * PackParserListeners are notified before the {@link PackParser} starts 
+   * parsing the receive pack and after the parsing. The listener is needed to 
+   * get the information which objects are pushed with the receive pack. 
+   * Provided for SCM-Manager 1.45.
+   */
+  public static interface PackParserListener {
+    
+    /**
+     * This method is called before the 
+     * {@link PackParser#parse(ProgressMonitor, ProgressMonitor)} method is 
+     * called.
+     * 
+     * @param parser receive pack parser
+     */
+    public void before(PackParser parser);
+
+    /**
+     * This method is called after the 
+     * {@link PackParser#parse(ProgressMonitor, ProgressMonitor)} method was 
+     * called.
+     * 
+     * @param parser receive pack parser
+     */
+    public void after(PackParser parser);
+    
+  }
+  
+  /** listener for pack parser finish event */
+  private PackParserListener packParserListener;
 
 	/** Database we write the stored objects into. */
 	final Repository db;
@@ -753,6 +784,11 @@
 	public RefFilter getRefFilter() {
 		return refFilter;
 	}
+  
+  /** @return PackParserListener */
+  public final PackParserListener getPackParserListener(){
+    return packParserListener;
+  }
 
 	/**
 	 * Set the hook used while advertising the refs to the client.
@@ -789,6 +825,14 @@
 	public void setRefFilter(RefFilter refFilter) {
 		this.refFilter = refFilter != null ? refFilter : RefFilter.DEFAULT;
 	}
+  
+  /** Sets the listener for the {@link PackParser}.
+   * 
+   * @param packParserListener listener
+   */
+  public void setPackParserListener(PackParserListener packParserListener){
+    this.packParserListener = packParserListener;
+  }
 
 	/**
 	 * Get timeout (in seconds) before aborting an IO operation.
@@ -1474,10 +1518,21 @@
 			parser.setObjectChecker(objectChecker);
 			parser.setLockMessage(lockMsg);
 			parser.setMaxObjectSizeLimit(maxObjectSizeLimit);
+
+			// call listener before
+			if (packParserListener != null) {
+			  packParserListener.before(parser);
+			}
+
 			packLock = parser.parse(receiving, resolving);
 			packSize = Long.valueOf(parser.getPackSize());
 			stats = parser.getReceivedPackStatistics();
 			ins.flush();
+
+			// call listener before
+			if (packParserListener != null) {
+			  packParserListener.after(parser);
+			}
 		}
 
 		if (timeoutIn != null)
