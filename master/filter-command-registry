# HG changeset patch
# Parent  6e6ca170b5edd81ac08304556ba6416ae43fbbb1

diff --git a/org.eclipse.jgit.lfs.test/tst/org/eclipse/jgit/attributes/FilterCommandRegistryTest.java b/org.eclipse.jgit.lfs.test/tst/org/eclipse/jgit/attributes/FilterCommandRegistryTest.java
new file mode 100644
index 000000000..60ff4a1b8
--- /dev/null
+++ b/org.eclipse.jgit.lfs.test/tst/org/eclipse/jgit/attributes/FilterCommandRegistryTest.java
@@ -0,0 +1,43 @@
+package org.eclipse.jgit.attributes;
+
+import org.junit.Assert;
+import org.junit.Test;
+
+import java.io.IOException;
+import java.util.regex.Pattern;
+
+public class FilterCommandRegistryTest {
+
+    @Test
+    public void shouldFindFilterCommandFactoryByPattern() throws IOException {
+        FilterCommand command = new MockFilterCommand();
+        FilterCommandFactory filterCommandFactory = (db, in, out) -> command;
+
+        FilterCommandRegistry.register(Pattern.compile("some .* pattern"), filterCommandFactory);
+
+        Assert.assertSame(command, FilterCommandRegistry.createFilterCommand("some nice pattern", null, null, null));
+    }
+
+    @Test
+    public void shouldPreferExactMatchesOverPatterns() throws IOException {
+        FilterCommand command = new MockFilterCommand();
+        FilterCommandFactory exactCommandFactory = (db, in, out) -> command;
+        FilterCommandFactory patternCommandFactory = (db, in, out) -> {Assert.fail("should not call factory for pattern"); return null;};
+
+        FilterCommandRegistry.register(Pattern.compile("some exact pattern"), patternCommandFactory);
+        FilterCommandRegistry.register(Pattern.compile("some .* pattern"), exactCommandFactory);
+
+        Assert.assertSame(command, FilterCommandRegistry.createFilterCommand("some exact pattern", null, null, null));
+    }
+
+    private static class MockFilterCommand extends FilterCommand {
+        public MockFilterCommand() {
+            super(null, null);
+        }
+
+        @Override
+        public int run() {
+            return 0;
+        }
+    }
+}
\ No newline at end of file
diff --git a/org.eclipse.jgit/src/org/eclipse/jgit/attributes/FilterCommandRegistry.java b/org.eclipse.jgit/src/org/eclipse/jgit/attributes/FilterCommandRegistry.java
index 1c9e9d7f7..238eaefd3 100644
--- a/org.eclipse.jgit/src/org/eclipse/jgit/attributes/FilterCommandRegistry.java
+++ b/org.eclipse.jgit/src/org/eclipse/jgit/attributes/FilterCommandRegistry.java
@@ -15,16 +15,27 @@
 import java.util.Map;
 import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
+import java.util.regex.Pattern;
 
 import org.eclipse.jgit.lib.Repository;
 
 /**
- * Registry for built-in filters
+ * Registry for built-in filters.
+ *
+ * There are two ways to register filters:
+ * <ol>
+ *     <li>With a string equal to the expected command</li>
+ *     <li>With a pattern matching a set of commands</li>
+ * </ol>
+ *
+ * Please mind, that commands registered with a string (using the first way)
+ * will precede filters registered with a pattern.
  *
  * @since 4.6
  */
 public class FilterCommandRegistry {
 	private static Map<String, FilterCommandFactory> filterCommandRegistry = new ConcurrentHashMap<>();
+	private static ConcurrentHashMap<Pattern, FilterCommandFactory> filterCommandPatternRegistry = new ConcurrentHashMap<>();
 
 	/**
 	 * Register a {@link org.eclipse.jgit.attributes.FilterCommandFactory}
@@ -49,6 +60,30 @@ public static FilterCommandFactory register(String filterCommandName,
 		return filterCommandRegistry.put(filterCommandName, factory);
 	}
 
+	/**
+	 * Register a {@link org.eclipse.jgit.attributes.FilterCommandFactory}
+	 * responsible for creating
+	 * {@link org.eclipse.jgit.attributes.FilterCommand}s for a certain command
+	 * pattern. If the factory f1 is registered for the name "jgit://builtin/x (.*)"
+	 * then a call to <code>getCommand("jgit://builtin/x file", ...)</code> will call
+	 * <code>f1(...)</code> to create a new instance of
+	 * {@link org.eclipse.jgit.attributes.FilterCommand}
+	 *
+	 * @param filterCommandNamePattern
+	 *            the command name pattern for which this factory is registered
+	 * @param factory
+	 *            the factory responsible for creating
+	 *            {@link org.eclipse.jgit.attributes.FilterCommand}s for the
+	 *            specified name pattern
+	 * @return the previous factory associated with <tt>commandName</tt>, or
+	 *         <tt>null</tt> if there was no mapping for <tt>commandName</tt>
+	 * @since 5.4scm2
+	 */
+	public static FilterCommandFactory register(Pattern filterCommandNamePattern,
+			FilterCommandFactory factory) {
+		return filterCommandPatternRegistry.put(filterCommandNamePattern, factory);
+	}
+
 	/**
 	 * Unregister the {@link org.eclipse.jgit.attributes.FilterCommandFactory}
 	 * registered for the given command name
@@ -62,6 +97,20 @@ public static FilterCommandFactory unregister(String filterCommandName) {
 		return filterCommandRegistry.remove(filterCommandName);
 	}
 
+	/**
+	 * Unregister the {@link org.eclipse.jgit.attributes.FilterCommandFactory}
+	 * registered for the given command name pattern
+	 *
+	 * @param filterCommandNamePattern
+	 *            the FilterCommandFactory's filter command name pattern
+	 * @return the previous factory associated with <tt>filterCommandName</tt>,
+	 *         or <tt>null</tt> if there was no mapping for <tt>commandName</tt>
+	 * @since 5.4scm2
+	 */
+	public static FilterCommandFactory unregister(Pattern filterCommandNamePattern) {
+		return filterCommandPatternRegistry.remove(filterCommandNamePattern);
+	}
+
 	/**
 	 * Check whether any
 	 * {@link org.eclipse.jgit.attributes.FilterCommandFactory} is registered
@@ -72,7 +121,7 @@ public static FilterCommandFactory unregister(String filterCommandName) {
 	 * @return <code>true</code> if any factory was registered for the name
 	 */
 	public static boolean isRegistered(String filterCommandName) {
-		return filterCommandRegistry.containsKey(filterCommandName);
+		return getFactory(filterCommandName) != null;
 	}
 
 	/**
@@ -111,8 +160,21 @@ public static boolean isRegistered(String filterCommandName) {
 	public static FilterCommand createFilterCommand(String filterCommandName,
 			Repository db, InputStream in, OutputStream out)
 			throws IOException {
-		FilterCommandFactory cf = filterCommandRegistry.get(filterCommandName);
+		FilterCommandFactory cf = getFactory(filterCommandName);
 		return (cf == null) ? null : cf.create(db, in, out);
 	}
 
+	private static FilterCommandFactory getFactory(String filterCommandName) {
+		return filterCommandRegistry.getOrDefault(filterCommandName, getFactoryFromPatterns(filterCommandName));
+	}
+
+	private static FilterCommandFactory getFactoryFromPatterns(String filterCommandName) {
+		return filterCommandPatternRegistry
+				.entrySet()
+				.stream()
+				.filter(e -> e.getKey().matcher(filterCommandName).find())
+				.map(Map.Entry::getValue)
+				.findAny()
+				.orElse(null);
+	}
 }
